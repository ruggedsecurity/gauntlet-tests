library identifier: 'pipeline-library@master', retriever: modernSCM(
    [$class: 'GitSCMSource', 
    credentialsId: '', 
    id: 'pipeline-library', 
    remote: 'https://github.com/devopspatterns/pipeline-library.git', 
    traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait']]
]) 

pipeline {
    agent {
        kubernetes {
            label 'gaultlt-pod'
            containerTemplate {
                name 'gauntlt'
                image 'gauntlt/gauntlt'
                ttyEnabled true
                command 'cat'
            }
        }
    }

    triggers {
        eventTrigger jmespathQuery("type == 'SECURITY_SCAN'")
        pollSCM('23 11 * * *')
    }
    
    parameters { 
        string(name: 'HOST', defaultValue: 'k8s.designingdevops.com', description: 'Domain to Scan') 
    }

    environment {
        HOSTNAME="${params.HOST}"
    }
    
    options {
        // General Jenkins job properties
        buildDiscarder(logRotator(numToKeepStr:'5'))
    }

    stages {
        stage('Determine Cause') {
          steps {
              echo "All causes of this build:" + currentBuild.getBuildCauses().toString()
              echo "${currentBuild.getBuildCauses().size()}";
              script {
                  echo currentBuild.getBuildCauses()[0]._class;
              }
              echo currentBuild.getBuildCauses("hudson.model.Cause").toString()

              script {
                  if (currentBuild.getBuildCauses()[0]._class == "com.cloudbees.jenkins.plugins.pipeline.events.EventTriggerCause") {
                      echo currentBuild.getBuildCauses()[0].event.toString()
                      echo currentBuild.getBuildCauses()[0].event.source.toString()
                      HOSTNAME = currentBuild.getBuildCauses()[0].event.appName.toString()
                      HOST = $HOSTNAME
                  }
              }
           }
        }
        
        stage('Security Scans') {
            steps {
                echo """
===========================================
Running Scans against $HOSTNAME
===========================================
                """
                container('gauntlt') {
                   sh 'gauntlt'
                }
            }
        }
    }
    post {
        failure {
            publishSecurityEvent("$HOSTNAME")
        }
    }
}


